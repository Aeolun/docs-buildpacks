---
title: Staticfile Buildpack
owner: Buildpacks
---

<strong><%= modified_date %></strong>

## <a id='overview'></a> Overview

### <id='introduction'></a>Introduction

This topic describes how to configure the Staticfile buildpack and use it to push static content to the web. 
It also shows you how to serve a simple "Hello World" page using the staticfile buildpack.

### <a id='definitions'></a>Definitions

**Staticfile app** — An app or content that requires no backend code other than the Nginx webserver, which the buildpack provides.
   Examples of staticfile apps are front-end JavaScript apps, static HTML content, and HTML/JavaScript forms.

**Staticfile buildpack** — The buildpack that provides runtime support for staticfile apps and apps with backends hosted elsewhere.

### <a id='memory'></a>About Memory Usage

Nginx only requires 20&nbsp;M to serve static assets. 
This is why Pivotal recommends using the `-m 64 M` command when pushing the app to reduce the RAM allocation from the 
default 1&nbsp;G usually allocated to Cloud Foundry containers. 

### <a id='sample'></a>Create and Push a Sample App

The following procedure describes how to create and push a single page staticfile app using the Staticfile buildpack.

1. In your local workspace, use `cf login` to log in to <%= vars.product_short %>. For more information, see [Login](../../cf-cli/getting-started.html#login).

1. Create and change into a root directory for the sample app in your workspace:
    
    <code>
    $ mkdir sample
    $ cd sample
    </code>

2. Create an `index.html` file that contains some text:

    <code>
    $ echo 'Hello World' > index.html
    </code>

3. Create an empty file named `Staticfile`:

    <code>
    $ touch Staticfile
    </code>

1. Use `cf login` to log in to <%= vars.product_short %>. 
For more information, see [Login](../../cf-cli/getting-started.html#login).

4. Push the sample app:

    <code>
    $ cf push hello -m 64M
    </code>
  
5. Find the URL of the hello app in the output. A fragment of output is shown below:
  <pre class='terminal'>
  Creating app hello in org sample-org / space sample-space as username<span>@</span>example.com...
  OK
  &#8230; 
  requested state: started
  instances: 1/1
  usage: 64M x 1 instances
  urls: hello.example.com
  </pre>

7. Navigate to the URL to see the hello app running.

## <a id='configure-and-push'></a>Configuring the Buildpack and Pushing the App

This section describes...
how to configure the staticbuildpack options by x or y and then how to push your app.

### <a id='config-options'></a>Configuration Options

This list describes some of the aspects of the Staticfile buildpack that you can configure:

* **Directory list** — An HTML page that displays a directory index for your site. A sample of a directory list is shown below. 

    ![Directory Index](../images/directory-index.png)

    If your site is missing an index.html, you can choose to display a directory list instead of the standard 404 error page.

* **SSI** — Server Side Includes (SSI) is ... You can apply SSI to your app. [NEEDS WORK]. For more information about SSI, see the [Server Side Includes](https://en.wikipedia.org/wiki/Server_Side_Includes) entry on Wikipedia.

* **Pushstate routing** — A way to keep browser-visible URLs clean for client-side JavaScript apps that serve multiple routes. 

    For example, pushstate routing allows a single JavaScript file route to multiple anchor-tagged URLs that look like `/some/path1` instead of `/some#path1`.

* **_GZip file serving and compressing_** — 
The [`gzip_static`](http://nginx.org/en/docs/http/ngx_http_gzip_static_module.html) and [`gunzip`](http://nginx.org/en/docs/http/ngx_http_gunzip_module.html) modules are set to `on` by default.

* **_Proxy support_** — Allows you to use a proxy to download dependencies during staging.

* **_Force HTTPS_** — A way to enforce that all requests are sent via HTTPS. This redirects non-HTTPS requests as HTTPS requests. For information about when not to force HTTPS, see [About FORCE_HTTPS with Reverse Proxies](#force-https) below.

### <a id='basic-auth'></a>Creating hashes for basic authentication

You can apply basic authentication to your app. 

![Basic Authentication](../images/basicauth.png)

Use this website to create hashed username and password pairs for your website: 
[http://www.htaccesstools.com/htpasswd-generator/](http://www.htaccesstools.com/htpasswd-generator/)

### <a id='force-https'></a>About FORCE_HTTPS with Reverse Proxies 

If you are using a reverse proxy such as CloudFlare and you have rules to redirect HTTP, do not use FORCE_HTTPS. 
This is because the reverse proxy is intended to communicate directly with the app through HTTP.
Forcing the reverse proxy to communicate with the app can cause redirect loops.

The diagram below illustrates a HTTPS redirect loop and direct HTTP communication between a reverse proxy and an app server.

<img src="../images/reverse-proxy.png">

### <a id='config-process'></a>Configure and push your app

3. In the root directory of your app, create an empty file named `Staticfile`:

    <code>
    $ touch Staticfile
    </code>

2. Configure the Staticfile buildpack for the needs of your app.

    <table border='1' class='nice'>
    <tr>
    <th><strong>If you want &hellip;</strong></th> <th><strong>Then&hellip;</strong></th>
    </tr>

    <tr>
    <td>to serve <code>index.html</code> and other assets not from the root directory</tc>
    <td>add this line to the static file:<br><code>root: DIRECTORY_NAME</code><br>for example, <pre class='terminal'>root: public</pre></td>
    </tr>
    
    <tr>
    <td>display a directory list instead of the standard 404 error</td>
    <td>add this line to the Staticfile:<br><code>directory: visible</code></td>
    </tr>

    <tr>
    <td>disable gzip_static and gunzip modules so that...</td>
    <td>add this line to the Staticfile:<br><code>directory: visible</code></td>
    </tr>

    <tr>
    <td>enable pushstate routing</td>
    <td>add this line to the Staticfile:<br><code>pushstate: enabled</code></td>
    </tr>

    <tr>
    <td>enable SSI</td>
    <td>add this line to the Staticfile:<br><code>ssi: enabled </code></td>
    </tr>

    <tr>
    <td>enable basic authentication for your app or website</td>
    <td>create a file called Staticfile.auth in the root directory or alternative root directory and add one or more user/password lines to it. 
    For example,<br> <code>bob:$apr1$DuUQEQp8$ZccZCHQElNSjrg.erwSFC0<br>alice:$apr1$4IRQGcD/$.UMFLnIHSD9ZHJ86TR4zx.</code><br>
    For more information, see [Basic Authentication](#basic-auth) above.</td> 
    </tr>

    <tr>
    <td>Force HTTPS</td>
    <td>add the line<br><code>FORCE_HTTPS: true</code> to a file called <code>nginx.conf</code> in your root directory or alternate root directory.</td> 
    </tr>

    <tr>
    <td>make additional configuration changes to Nginx</td>
    <td>add `nginx.conf` and `mime.types` to your root folder or to the alternate root folder if you specified one.</td> 
    </tr>
    </table>

1. Push your app:

    <code>
    $ cf push APP_NAME -m 64M
    </code>

    where `APP_NAME` is the name you want to give your application. 

    For example, 
    <pre class='terminal'> 
    CODE OUTPUT GOES HERE
    </pre>

2. Find the URL of your app in the output from the push command above and navigate there to see your static app running.

### <a id='hsts'></a> Enable HTTP Strict Transport Security ###

To enable HTTP Strict Transport Security (HSTS), add the following line to your `Staticfile`:

```
http_strict_transport_security: true
```

This causes Nginx to respond to all requests with the header:

```
Strict-Transport-Security: max-age=31536000
```


<p class="note"><strong>Note</strong>: This header causes a browser that receives it to make all future requests over HTTPS. Because of the long amount of time this setting persists in the browser, only enable this setting once you are sure that everything is properly configured.</p>

### <a id='custom_nginx_configuration'></a> Custom Nginx Configuration ###

## <a id='help'></a>Help and Support

### <a id='intro'></a> Introduction

Here are some ways you can get more help with using the Staticfile buildpack or with developing your own Staticfile buildpack.

### <a id='slack'></a>Slack

You can join the #buildpacks channel in our [Slack community] (http://slack.cloudfoundry.org/) if you need any further assistance.

### <a id='relnotes'></a> Release notes

You can find current information about this buildpack on the Staticfile buildpack [release page](https://github.com/cloudfoundry/staticfile-buildpack/releases) in GitHub.

### <a id='extend'></a> Staticfile buildpack repo in Github

You can find more information about using and extending the Staticfile buildpack in Cloud Foundry in the
[staticfile-buildpack GitHub repo](https://github.com/cloudfoundry/staticfile-buildpack).

