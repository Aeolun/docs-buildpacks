---
title: Getting Started Deploying Groovy Apps
---

<%=vars.GSG_intro_sentence%>

This guide is intended to walk you through deploying a Groovy app to <%=vars.product_full%>. You can choose whether to push a sample app, your own app, or both.

If at any time you experience a problem following the steps below, try checking the <%=vars.known_issues%> topic, or refer to the [Troubleshooting Application Deployment and Health](./../../devguide/deploy-apps/troubleshoot-app-health.html) topic for more tips.

## <a id='deploy-sample'></a>Deploy a Groovy Sample Application ##

This section describes how to deploy a Groovy sample application to <%=vars.product_short%>.

To learn how to deploy your own Groovy app, see [Deploy Your Groovy Application](#deploy-yourapp).

### <a id='sample-prereqs'></a>Prerequisites ###

* [Git](http://git-scm.com) configured on your workstation and a [GitHub](https://github.com) account
* Basic Groovy knowledge
* (**Optional**) [Spring Boot CLI](http://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/#cli) to run your Groovy app locally

### <a id='sample-step1'></a>Step 1: Get a Sample Groovy App from GitHub ###

Run `git clone https://github.com/cf-platform-eng/cf-bg-demo.git` to clone the `cf-bg-demo` app from GitHub.

### <a id='sample-step2'></a>Step 2: Log in and Target the API Endpoint   ###
Run `cf login -a [API_ENDPOINT]`, enter your login credentials, and select a space and org. The API endpoint is <%=vars.api_endpoint%>.

### <a id='sample-step3'></a>Step 3: Deploy the Sample App ###

1. `cd` to the cloned app directory.
1. Complete all the steps in the **Doing a Blue-Green Demo** section of the [cf-platform-eng/cf-bg-demo README](https://github.com/cf-platform-eng/cf-bg-demo).

If you want to run the app locally using the Spring Boot CLI, complete the **Running Locally** section.

  `cf push [APP_NAME]` pushes the specified app from the current directory to <%=vars.product_short%>. Use the `-n` or `--random-route` flag to create a unique URL for the app to avoid URL collisions with other apps.

  `cf push` automatically searches for an [application manifest YAML file](./../../devguide/deploy-apps/manifest.html) and also determines the appropriate [buildpack](./index.html) for the app. A manifest specifies what `cf push` should do with the app and the buildpack provides framework and runtime support for your app. 

  The example shows the terminal output of deploying the initial blue version of the app. Because this sample application does not have a manifest, the `-m` and `-b` flags substitute for the manifest and set the memory and buildpack location for the app. `cf push` uses these settings to create the app, create and bind and the route, and upload the app to <%=vars.product_short%>. It then starts one instance of the app with 512M. After the app starts, the output displays the health and status of the app.

<pre class="terminal">
$ cf push -m 512M -b https://github.com/cloudfoundry/java-buildpack --random-route cf-bg-demo-blue

Creating app cf-bg-demo-blue in org Cloud-Apps / space development as clouduser@example.com...
OK

Creating route cf-bg-demo-blue-grouty-sarcode.<%=vars.app_domain%>...
OK

Binding cf-bg-demo-blue-grouty-sarcode.cfapps.io to cf-bg-demo-blue...
OK

Uploading cf-bg-demo-blue...
Uploading app files from: /Users/pivotal/workspace/cf-bg-demo
Uploading 262.9K, 19 files
OK

Starting app cf-bg-demo-blue in org Cloud-Apps / space development as clouduser@example.com...
OK
-----> Downloaded app package (576K)
Cloning into '/tmp/buildpacks/java-buildpack'...
-----> Java Buildpack Version: 840da8b | https://github.com/cloudfoundry/java-buildpack#840da8b
-----> Downloading Open Jdk JRE 1.7.0_65 from http://download.run.pivotal.io/openjdk/lucid/x86_64/openjdk-1.7.0_65.tar.gz (1.2s)
       Expanding Open Jdk JRE to .java-buildpack/open_jdk_jre (1.1s)
-----> Downloading Spring Boot CLI 1.1.5_RELEASE from http://download.run.pivotal.io/spring-boot-cli/spring-boot-cli-1.1.5_RELEASE.tar.gz (0.4s)
       Expanding Spring Boot CLI to .java-buildpack/spring_boot_cli (0.1s)
-----> Uploading droplet (39M)

0 of 1 instances running, 1 starting
0 of 1 instances running, 1 starting
1 of 1 instances running

App started

Showing health and status for app cf-bg-demo-blue in org Cloud-Apps / space development as clouduser@example.com...
OK

requested state: started
instances: 1/1
usage: 512M x 1 instances
urls: cf-bg-demo-blue-grouty-sarcode.<%=vars.app_domain%>

	     state     since                    cpu    memory           disk   
	#0   running   2014-08-26 11:46:54 AM   0.0%   325.2M of 512M   114.5M of 1G
</pre>

### <a id='sample-step4'></a>Step 4: Test the Sample App ###

You’ve deployed your first app to <%=vars.product_short%>!

In Step 5 of the README instructions, you complete mapping both blue and green app versions to the zero downtime route. The composite image below shows the result of this mapping to the zero downtime route URL `cf-bg-demo-a1426.cfapps.io`. Refreshing the webpage causes the different app versions to display and demonstrates the <%=vars.product_short%> load balancing functionality in action.

<%= image_tag("../images/blue_green_demo.png") %>

Now let’s access your app online using its URL. In the terminal output, the `urls` field of the `App started` block contains the app URL. This is the `HOST_NAME` and alphanumeric suffix you specified with the `-n` flag plus the domain `<%=vars.app_domain%>`. Note that because you unmapped the blue app version from your zero downtime route URL in Step 6, only the green app version displays when you browse to this URL. Remap the blue app version to view both versions and test the <%=vars.product_short%> load balancing functionality.

You can now use the `cf` <%=vars.dev_console_2%> to review information and administer your app and your <%=vars.product_short%> account. For example, you could increase the number of app instances from 1 to 3, and redeploy the app with a new app name and host name. 

See the [Manage Your Application with the cf CLI](#cli-manage) section for more information. <%=vars.dev_console_4%>

## <a id='deploy-yourapp'></a>Deploy Your Groovy Application ##

This section describes how to deploy your Groovy application to <%=vars.product_short%>.

### <a id='yourapp-prereqs'></a>Prerequisites ###

* A Groovy app that runs locally on your workstation
* (**Optional**) [Spring Boot CLI](http://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/#cli) to run your Groovy app locally
* (**Optional**) [Git](http://git-scm.com) configured on your workstation and a [GitHub](https://github.com) account
* Intermediate to advanced Groovy knowledge
* JDK 1.6, 1.7., or 1.8 for Java 6, 7, or 8 configured on your workstation

<p class="note"><strong>Note</strong>: The Cloud Foundry Java buildpack uses JDK 1.8, but you can modify the buildpack and the manifest for your app to compile to an earlier version. Refer to <a href="#yourapp-step8">Step 8: Configure the Deployment Manifest</a>.</p>

### <a id='yourapp-step1'></a>Step 1: Add the Cloud Foundry Java Client Library to Your Project ###

The Cloud Foundry Java Client Library enables you to query and manage app instances and account instance information of a <%=vars.product_short%> account instance. For more information on including the library with your Maven or Gradle project and the specific objects that you can query, refer to the [Cloud Foundry Java Client Library](./java-client.html) topic.

<p class="note"><strong>Note</strong>: Ensure that your Groovy app runs locally before continuing with this procedure.</p>

### <a id='yourapp-step2'></a>Step 2: (Optional) Integrate a Plugin for Your Build Tool ###

<%=vars.product_short%> provides plugins for Maven and Gradle. You can deploy and manage your apps using Maven or Gradle command-line syntax and configure security credentials. 

<p class="note"><strong>Note</strong>: Because Gradle is based on Groovy and integrates with Maven, you might want to choose Gradle to build your apps.</p>

For more information, refer to the [Build Tool Integration](./build-tool-int.html) topic.

### <a id='yourapp-step3'></a>Step 3: Declare App Dependencies  ###

Be sure to declare all the dependency tasks for your app in the build script of your chosen build tool. 

The table lists build script information for Gradle and Maven and provides documentation links for each build tool. If you use Gradle because of its integration with Groovy and Maven, see the Gradle documentation for information on the following:

* Dependency management 
* Groovy plugin and quickstart guide 
* Maven integration and publishing plugins

The table lists build script information for Gradle and Maven and provides documentation links for each build tool. 

<table border="1" class="nice">
<tr>
  <th><strong>Build Tool</strong></th>
  <th><strong>Build Script</strong></th>
    <th><strong>Documentation</strong></th>
</tr>
<tr>
  <td>Gradle</td><td><code>build.gradle</code></td><td><a href="http://www.gradle.org/docs/current/userguide/userguide.html">Gradle User Guide</a></td>
</tr>
<tr>
  <td>Maven</td><td><code>pom.xml</code></td><td><a href="http://maven.apache.org/guides/">Apache Maven Project Documentation</a></td>
</tr>
</table>

### <a id='yourapp-step4'></a>Step 4: Allocate Sufficient Memory ###

If you do not allocate sufficient memory to a Java application when you deploy it, it may fail to start, or <%=vars.product_short%> may terminate it. You must allocate enough memory to allow for the following:

* Java heap
* Metaspace, if using Java 8
* PermGen, if using Java 7 or earlier
* Thread stacks
* JVM overhead

The `config/open_jdk_jre.yml` file of the [Cloud Foundry Java buildpack](https://github.com/cloudfoundry/java-buildpack) contains default memory size and weighting settings for the JRE. See the [Open JDK JRE README](https://github.com/cloudfoundry/java-buildpack/blob/master/docs/jre-open_jdk_jre.md) on GitHub for an explanation of JRE memory sizes and weightings and how the Java buildpack calculates and allocates memory to the JRE for your app.

To configure memory-related JRE options for your app, you create a custom buildpack and specify this buildpack in your deployment manifest. For more information on configuring custom buildpacks and manifests, see [Step 8: Configure the Deployment Manifest](#yourapp-step8). 

When your app is running, you can use the `cf app [APP_NAME]` command to see memory utilization.

<p class="note"><strong>Note</strong>: <%=vars.product_short%> automatically allocates 512MB to an app when you do not specify a value.</p>

### <a id='yourapp-step5'></a>Step 5: Provide a JDBC Driver ###

The Java buildpack does not bundle a JDBC driver with your application. If your application accesses a SQL RDBMS, you must do the following:

* Include the appropriate driver in your application.
* Create a dependency task for the driver in the build script for your build tool or IDE.

### <a id='yourapp-step6'></a>Step 6: Configure Service Connections for Your Groovy App ###

<%=vars.product_short%> provides extensive support for connecting a Groovy app that runs on Grails or Spring to to services such as MySQL, PostgreSQL, MongoDB, Redis, and RabbitMQ. For more information on creating and binding a service connection for your app, refer to the appropriate framework topic:

* [Configure Service Connections for Grails](./grails-service-bindings.html)
* [Configure Service Connections for Spring](./spring-service-bindings.html)

If your Groovy app runs on the Play Framework and connects to a single Postgres or MySQL database instance, auto-reconfiguration functionality automatically connects your app to the service. For more information, refer to the [Configure Service Connections for Play Framework](./play-service-bindings.html) topic.

### <a id='yourapp-step7'></a>Step 7: Configure the Deployment Manifest ###

You can specify deployment options in a manifest file `manifest.yml` that the `cf push` command uses when deploying your app. 

For example, you can set memory-related JVM options or a specific Java version in a custom buildpack and configure your manifest to use your custom buildpack:

1. Fork the [Cloud Foundry Java buildpack](https://github.com/cloudfoundry/java-buildpack) and edit `config/open_jdk_jre.yml`.
1. Set the `buildpack` attribute in the manifest to the buildpack URL or name.

Refer to the [Deploying with Application Manifests](../../devguide/deploy-apps/manifest.html) topic for more information.

### <a id='yourapp-step8'></a>Step 8: Log in and Target the API Endpoint ###

Run `cf login -a [API_ENDPOINT]`, enter your login credentials, and select a space and org. The API endpoint is <%=vars.api_endpoint%>.

<%=vars.gen_GSG%>

### <a id='yourapp-step9'></a>Step 9: Deploy Your Application ###
When you deploy your application, `cf push`:

 * Creates a URL that is the route to your application. The URL is in the form HOST.DOMAIN, where HOST is the APP_NAME and DOMAIN is specified by your administrator. Your DOMAIN is`<%=vars.app_domain%>`.

 * Searches for an application manifest YAML file. A manifest specifies what `cf push` should do with the app.
 * Determines the appropriate buildpack for the app. A buildpack provides framework and runtime support for your app.

<p class="note"><strong>Note</strong>: You must use the CLI to deploy apps.</p>

For example: `cf push my-app` creates the URL `my-app.<%=vars.app_domain%>`.

1. `cd` to the app directory that you want to deploy.
1. Run `cf push [APP-NAME] -p [PATH-TO-WAR]`.  

    <br />
    Your Groovy app might include an artifact, such as a `.war` or `.distZip` file. You must include the path to this file in the `cf push` command if you do not declare the path in the `applications` block of the manifest file. The example shows how to specify a path to the `.war` file for a Groovy app. Refer to the [Tips for Java Developers](./java-tips.html) topic for how to deploy the following:
    * Groovy apps that do and do not include an artifact
    * Groovy apps built with either the Play Framework or the Spring Boot CLI
    * Grails packages that include a WAR file

    <p class="note"><strong>Note</strong>: The URL for your app must be unique from other apps that <%=vars.product_short%> hosts or the push will fail. You can use <code>-n</code> or <code>--random-route</code> options to create a unique URL. Run <code>cf help push</code> to view other options for this command.</p>

1. Launch a new terminal window and run `cf logs [APP-NAME]` to simultaneously view log activity while the app deploys.
1. Browse to your app URL.

    Search for the `urls` field in the `App started` block in the output of the `cf push` command. Use the URL to access your app online.

    <pre class="terminal">
    
	App started

	Showing health and status for app cf-bg-demo-blue in org Cloud-Apps / space development as clouduser@example.com...
	OK

	requested state: started
	instances: 1/1
	usage: 512M x 1 instances
	urls: cf-bg-demo-blue-grouty-sarcode.<%=vars.app_domain%>

	     state     since                    cpu    memory           disk   
	#0   running   2014-08-26 11:46:54 AM   0.0%   325.2M of 512M   114.5M of 1G
    </pre>

## <a id='cli-manage'></a>Manage Your Application with the cf CLI ##

Run `cf help` to view a complete list of commands, grouped by task categories, and run `cf help [COMMAND]` for detailed information about a specific command. For more information about using the `cf` CLI, refer to the cf Command Line Interface (CLI) topics, especially the <%=vars.cli_v6%> topic.

<p class="note"><strong>Note</strong>: You cannot perform certain tasks in the <%=vars.dev_console_2%> because these are commands that only a <%=vars.product_short%> administrator can run. If you are not a <%=vars.product_short%> administrator, the following message displays for these types of commands: 

<code>error code: 10003, message: You are not authorized to perform the requested action</code>

<%=vars.dev_console_note%> 
</p>

## <a id='troubleshoot'></a>Troubleshooting ##
If your application fails to start, verify that the application starts in your local environment. Refer to the [Troubleshooting Application Deployment and Health](./../../devguide/deploy-apps/troubleshoot-app-health.html) topic to learn more about troubleshooting.

### <a id='deploy-fails'></a>App Deploy Fails ###
Even when the deploy fails, the app might exist on <%=vars.product_short%>. Run `cf apps` to review the apps in the currently targeted org and space. You might be able to correct the issue using the <%=vars.dev_console_2%>, or you might have to delete the app and redeploy.

### <a id='unique-url'></a>App Requires a Unique URL ###
<%=vars.product_short%> requires that each app that you deploy have a unique URL. Otherwise, the new app URL collides with an existing app URL and <%=vars.product_short%> cannot successfully deploy the app. You can fix this issue by running `cf push` with either of the following flags to create a unique URL:

* `-n` to assign a different HOST name for the app.
* `--random-route` to create a URL that includes the app name and random words. Using this option might create a long URL, depending on the number of words that the app name includes.

## <a id='learn-more'></a>Learn More ##
For more information on how to develop, deploy, and manage applications, refer to the [Developer Guide](./../../devguide/index.html). 


 
 
 
 
 