---
title: Buildpacks
---

Buildpacks provide framework and runtime support for your applications.
When you push an application, Cloud Foundry automatically installs the required
buildpack on the Droplet Execution Agent (DEA) where the application needs to run.
Buildpacks typically examine user-provided artifacts to determine what dependencies to
download and how to configure applications to communicate with bound services.

Cloud Foundry has three system buildpacks: one each for [Java]
(https://github.com/cloudfoundry/java-buildpack), [Node.js]
(https://github.com/cloudfoundry/heroku-buildpack-nodejs), and [Ruby]
(https://github.com/cloudfoundry/cf-buildpack-ruby).

If your application uses a language or framework that Cloud Foundry
buildpacks do not support, there are several options you can try:

* [Customize](./custom.html) an existing buildpack or write your own
* Use a [Cloud Foundry Community Buildpack][c]
* Use a [Heroku Third-Party Buildpack][h] (these may work with Cloud Foundry but have not been verified to do so)

[c]: https://github.com/cloudfoundry-community/cf-docs-contrib/wiki/Buildpacks
[h]: https://devcenter.heroku.com/articles/third-party-buildpacks

Heroku developed the buildpack approach and made it available to the open source community.

## <a id='auto-vs-manual'></a>Auto-configuration of Service Connections##

After you create a service instance and bind it to your application, you
configure the application to dynamically fetch the credentials for your
service.
These credentials are stored in the `VCAP_SERVICES` environment variable.

There are generally two methods for these consuming credentials.

* **Auto-configuration**: Some buildpacks create a service connection for you
by creating additional environment variables, updating config files, or passing
system parameters to the jvm.
* **Manual**: [Parse the JSON yourself](../devguide/deploy-apps/environment-variable.html#app). Helper libraries are
available for some frameworks.

| Runtime    | Framework  | Binding Strategy         |
| :--------- |:---------- |:-------------            |
| JVM / Java | <li>[Grails][g] <li>[Play Framework][p] <li>[Spring][s] | Auto-configuration<br/>Manual |
| Ruby       | <li>[Rack, Rails, or Sinatra](./ruby-service-bindings.html) |  [Limited auto-configuration support for Rails only](./ruby-service-bindings.html#auto-config)<br/>Manual |
| Javascript | <li>[Node.js](./node-service-bindings.html) | Manual |

[g]: ./grails-service-bindings.html
[p]: ./play-service-bindings.html
[s]: ./spring-service-bindings.html

## <a id='system'></a> Working with System Buildpacks ##

Refer to

### <a id='java'></a>Java ###

Use the Java buildpack to work with Java, Grails, Play or Spring.

* [Deploying Java applications](./java-tips.html)
* [Configure Service Connections for Grails](grails-service-bindings.html)
* [Configure Service Connections for Play](play-service-bindings.html)
* [Configure Service Connections for Spring](spring-service-bindings.html)

### <a id='node'></a>Node.js ###

* [Deploying Node.js applications](./node-tips.html)
* [Configure Service Connections for Node](node-service-bindings.html)

### <a id='ruby'></a>Ruby ###

* [Deploying Ruby applications](./ruby-tips.html)
* [Configure Service Connections for Ruby](ruby-service-bindings.html)



