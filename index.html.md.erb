---
title: Buildpacks
---

Buildpacks are a convenient way of packaging framework and/or runtime support
for your application.
For example, by default Cloud Foundry does not support Python, or a Python
framework like Django. Using a buildpack for Python and Django would allow you
to add support for these at the deployment stage.

When an application written using one of these languages and frameworks is
pushed, the required buildpack is automatically installed on the Cloud Foundry
Droplet Execution Agent (DEA) where the application will run.

Cloud Foundry has three system buildpacks: one each for [Java]
(https://github.com/cloudfoundry/java-buildpack), [Node.js]
(https://github.com/cloudfoundry/heroku-buildpack-nodejs), and [Ruby]
(https://github.com/cloudfoundry/cf-buildpack-ruby).

You can create [custom buildpacks](./custom.html) to add support for the
languages or frameworks of your choice.

## <a id='auto-vs-manual'></a>Auto-configuration of Service Connections##

After you create a service instance and bind it to your application, you
configure the application to dynamically fetch the credentials for your
service.
These credentials are stored in the
[VCAP_SERVICES](../deploy-apps/environment-variable.html#VCAP_SERVICES)
environment variable.

There are generally two methods for these consuming credentials.

* **Auto-configuration**: Some buildpacks create a service connection for you
by creating additional environment variables, updating config files, or passing
system parameters to the jvm.
* **Manual**: [Parse the JSON yourself](../devguide/deploy-apps/environment-variable.html#app). Helper libraries are
available for some frameworks.

| Runtime    | Framework  | Binding Strategy         |
| :--------- |:---------- |:-------------            |
| JVM / Java | <li>[Grails][g] <li>[Play Framework][p] <li>[Spring][s] | Auto-configuration<br/>Manual |
| Ruby       | <li>[Rack, Rails, or Sinatra](./ruby-service-bindings.html) |  [Limited auto-configuration support for Rails only](./ruby-service-bindings.html#auto-config)<br/>Manual |
| Javascript | <li>[Node.js](./node-service-bindings.html) | Manual |

[g]: ./grails-service-bindings.html
[p]: ./play-service-bindings.html
[s]: ./spring-service-bindings.html

## <a id='java'></a>Java, Grails, Play and Spring ##

* [Deploying Java applications](./java-tips.html)
* [Configure Service Connections for Grails](grails-service-bindings.html)
* [Configure Service Connections for Play](play-service-bindings.html)
* [Configure Service Connections for Spring](spring-service-bindings.html)

## <a id='node'></a>Node.js ##

* [Deploying Node.js applications](./node-tips.html)
* [Configure Service Connections for Node](node-service-bindings.html)

## <a id='ruby'></a>Ruby ##

* [Deploying Ruby applications](./ruby-tips.html)
* [Configure Service Connections for Ruby](ruby-service-bindings.html)



