---
title: Getting Started Deploying Ruby Apps
---

<%=vars.GSG_intro_sentence%>

This guide is intended to walk you through deploying a Ruby app to
<%=vars.product_full%>.
If you experience a problem following the steps below, check the
<%=vars.known_issues%> topic, or refer to the [Troubleshooting Application Deployment and Health](./../../devguide/deploy-apps/troubleshoot-app-health.html)
topic.

<p class="tip"><strong>Sample App Step</strong><br />If you want to go through this tutorial using the sample app, run <code>git clone	https://github.com/camelpunch/pong_matcher_ruby</code> to clone the <code>pong_matcher_ruby</code> app from GitHub, and follow the instructions in the Sample App Step sections.</p>

<p class="note"><strong>Note</strong>: Ensure that your Ruby app runs locally before continuing with this procedure.</p>

## <a id="deploy"></a>Deploy a Ruby Application ##

This section describes how to deploy a Ruby application to
<%=vars.product_short%>, and uses output from a sample app to show specific
steps of the deployment process.

### Prerequisites ###

* A Ruby 2.x application that runs locally on your workstation
* [Bundler](http://bundler.io) configured on your workstation
* Basic to intermediate Ruby knowledge
* The [cf Command Line Interface (CLI)](../../devguide/installcf/install-go-cli.html) installed on your
workstation
* (Optional) A robust production web server for Ruby apps, such as Unicorn

### Step 1: (Optional) Configure Automatically-Invoked Rake Tasks for Deployed Applications ###

<%=vars.product_short%> does not provide a way to run a Rake task on a deployed
application.
For <%=vars.product_short%> to automatically invoke a Rake task while an app is
deployed, you must include the Rake task in your application and configure the
application start command with the `command` attribute in the application
manifest, `manifest.yml`.

The following is an example of how to invoke a Rake database migration task at application startup.

1. Add the following code to the Rakefile for your app:

    <pre class="code">
    namespace :cf do
        desc "Only run on the first application instance"
        task :on_first_instance do
            instance_index = JSON.parse(ENV["VCAP_APPLICATION"])["instance_index"] rescue nil
        exit(0) unless instance_index == 0
        end
    end
    </pre>

    This Rake task limits an idempotent command to the first instance of a
	deployed application.

1. Add the task to the `manifest.yml` file with the `command` attribute,
referencing the idempotent command `rake db:migrate` chained with a start
command.

    <pre class="code">
    applications:
     &#8208; name: my-ruby-app
          command: bundle exec rake cf:on_first_instance db:migrate && ruby server.rb
    </pre>

<p class="tip"><strong>Sample App Step</strong><br />You can skip this step. The <code>pong_matcher_ruby</code> app has no Rake tasks.</p>

### Step 2: Create and Bind a Service Instance for a Ruby Application ###

This section describes using the CLI to configure a Redis Cloud managed service
instance for an app. <%=vars.dev_console_1%>

<%=vars.product_short%> supports two types of service instances:

* Managed services integrate with <%=vars.product_short%> through service
brokers that offer services and plans and manage the service calls between
<%=vars.product_short%> and a service provider.
* User-provided service instances enable you to connect your application to
pre-provisioned external service instances.

For more information on creating and using service instances, refer to the
[Services Overview](../../devguide/services/index.html) topic.

#### Create a Service Instance ####

Run `cf marketplace` to view managed and user-provided services and plans
that are available to you.

The example shows three of the available managed database-as-a-service providers
and the plans that they offer: `cleardb` MySQL, `elephantsql` PostgreSQL as a
Service, and `mongolab` MongoDB-as-a-Service.

<pre class="terminal">
	$  cf marketplace
	Getting services from marketplace in org Cloud-Apps / space development as clouduser@example.com...
	OK

	service          plans 	description
	...
	cleardb          spark, boost, amp, shock  	Highly available MySQL for your Apps
	...
	elephantsql      turtle, panda, hippo, elephant   PostgreSQL as a Service
	...
	mongolab         sandbox   	Fully-managed MongoDB-as-a-Service
	...
</pre>

Run `cf create-service SERVICE PLAN SERVICE_INSTANCE` to create a service
instance for your app.
Choose a SERVICE and PLAN from the list, and provide a unique name for the
SERVICE_INSTANCE.

<p class="tip"><strong>Sample App Step</strong><br />Run <code>cf create-service rediscloud 25mb redis</code>. This creates a service instance named <code>redis</code> that uses the <code>rediscloud</code> service and the <code>25mb</code> plan, as the example below shows.</p>

<pre class="terminal">
$ cf create-service rediscloud 25mb redis
Creating service redis in org Cloud-Apps / space development as clouduser@example.com....
OK
</pre>
</p>

#### Bind a Service Instance ####

When you bind an app to a service instance, <%=vars.product_short%> writes
information about the service instance to the VCAP_SERVICES app environment
variable.
The app can use this information to integrate with the service instance.

Most services support bindable service instances.
Refer to your service provider's documentation to confirm if they support this
functionality.

You can bind a service to an application with the command `cf bind-service APPLICATION SERVICE_INSTANCE`.

Alternately, you can configure the deployment manifest file by adding a
`services` block to the `applications` block and specifying the service
instance.
For more information and an example on service binding using a manifest, see the
Sample App Step.

<%=vars.dev_console_5%>

<p class="tip"><strong>Sample App Step</strong><br />You can skip this step. The manifest for the sample app contains a <code>services</code> sub-block in the <code>applications</code> block, as the example below shows. This binds the <code>redis</code> service instance that you created in the previous step.

<pre class="code">
---
applications:
...
  services:
    - redis
</pre>
</p>

### Step 3: Configure the Manifest File  ###

You can specify app deployment options in a manifest that the `cf push` command
uses.
For more information about application manifests and supported attributes, refer
to the [Deploying with Application Manifests](../../devguide/deploy-apps/manifest.html) topic.

<p class="tip"><strong>Sample App Step</strong><br />You can skip this step. The <code>manifest.yml</code> file for <code>pong_matcher_ruby</code> does not require any additional configuration to deploy the app.</p>

### Step 4: Log in and Target the API Endpoint ###

Run `cf login -a API_ENDPOINT`, enter your login credentials, and select a space
and org.
The API endpoint is <%=vars.api_endpoint%>.

  <%=vars.gen_GSG%>

  <p class="tip"><strong>Sample App Step</strong><br />You must do this step to run the sample app.</p>

### Step 5: (Optional) Configure a Production Server  ###

<%=vars.product_short%> uses the default standard Ruby web server library
WEBrick for Ruby apps.
However, <%=vars.product_short%> can support a more robust production web
server, such as Phusion Passenger, Puma, Thin, or Unicorn.

To instruct <%=vars.product_short%> to use a web server other than WEBrick, you
configure a text file called a _Procfile_.
A Procfile enables you to declare required runtime processes, called _process types_, for your web app.
Process managers in a server use the process types to run and manage the
workload.

When you deploy, <%=vars.product_short%> determines if a Procfile exists and
uses the Procfile to configure your app with the specified production web server
settings.

In a Procfile, you declare one process type per line and use the following
syntax, as shown in the example below:

* `PROCESS_TYPE` is the command name in the format of an alphanumeric string.
For Ruby web apps, you can declare `web` and `worker` process types.
* `COMMAND` is the command line to launch the process.

Example process type syntax:
<pre class="code">
PROCESS_TYPE: COMMAND
</pre>

To set a different production web server for your app:

1. Add the gem for the web server to your Gemfile.

1. In the root directory of your app, create a new configuration file or modify an existing file.

    Refer to your web server documentation for how to configure this file.

    Example Puma config file:
    <pre class="code">
    &#35; puma.rb
    threads 8,32
    workers 3

    on\_worker\_boot do
      # things workers do
    end
    </pre>

1. In the root directory of your app, create a Procfile and add a command line for a `web` process type that points to your web server.

    The example below shows a command that starts a Puma web server and
	specifies the app runtime environment, TCP port, and paths to the server
	state information and configuration files.
    Refer to your web server documentation for how to configure the specific
	command for a process type.

    Example Procfile:
    <pre class="code">
    web: bundle exec puma -e $RUBY_ENV -p 1234 -S ~/puma -C puma.rb
    </pre>

<p class="tip"><strong>Sample App Step</strong><br />You can skip this step. The <code>pong_matcher_ruby</code> app does not require a production server.</p>

### Step 6: Deploy an App ###

<p class="note"><strong>Note</strong>: You must use the cf CLI to deploy apps.</p>

From the root directory of your application, run `cf push APP_NAME` to deploy
your application.

`cf push APP_NAME` creates a URL route to your application in the form
HOST.DOMAIN, where HOST is your APP_NAME and DOMAIN is specified by your
administrator.
Your DOMAIN is`<%=vars.app_domain%>`. For example: `cf push my-app` creates the
URL `my-app.<%=vars.app_domain%>`.

The URL for your app must be unique from other apps that <%=vars.product_short%>
hosts or the push will fail.
Use the following options to help create a unique URL:

* `-n` to assign a different HOST name for the app.
* `--random-route` to create a URL that includes the app name and random words.
* `cf help push` to view other options for this command.

If you want to view log activity while the app deploys, launch a new terminal
window and run `cf logs APP_NAME`.

Once your app deploys, browse to your app URL.
Search for the `urls` field in the `App started` block in the output of the `cf push` command.
Use the URL to access your app online.

<p class="tip"><strong>Sample App Step</strong><br />Run <code>cf push pong_matcher_ruby -n HOST_NAME</code>.<br /><br />Example: <code>cf push pong_matcher_ruby -n pongmatch-ex12</code> <br /><br />The example below shows the terminal output of deploying the <code>pong_matcher_ruby</code> app. <code>cf push</code> uses the instructions in the manifest file to create the app, create and bind the route, and upload the app. It then binds the app to the <code>redis</code> service and follows the instructions in the manifest to start one instance of the app with 256M. After the app starts, the output displays the health and status of the app.</p>

<p class="note"><strong>Note</strong>: The <code>pong_matcher_ruby</code> app does not include a web interface. To interact with the  <code>pong_matcher_ruby</code> app, see the interaction instructions on GitHub: <a href="https://github.com/camelpunch/pong_matcher_ruby">https://github.com/camelpunch/pong_matcher_ruby</a>.</p>

<pre class="terminal">

	$ cf push pong_matcher_ruby -n pongmatch-ex12
	Using manifest file /Users/clouduser/workspace/pong_matcher_ruby/manifest.yml

	Creating app pong_matcher_ruby in org Cloud-Apps / space development as clouduser@example.com...
	OK

	Creating route pongmatch-ex12.<%=vars.app_domain%>
           Binding pongmatch-ex12.<%=vars.app_domain%> to pong_matcher_ruby...
    OK

	Uploading pong_matcher_ruby...
	Uploading app files from: /Users/clouduserl/workspace/pong_matcher_ruby
	Uploading 8.8K, 12 files
	OK
    Binding service redis to app pong_matcher_ruby in org Cloud-Apps / space development as clouduser@example.com...
    OK

    Starting app pong_matcher_ruby in org cf-Cloud-Apps / space development as clouduser@example.com...
    OK
    ...

    0 of 1 instances running, 1 starting
    1 of 1 instances running

    App started

    Showing health and status for app pong_matcher_ruby in org Cloud-Apps / space development as clouduser@example.com...
    OK

    requested state: started
    instances: 1/1
    usage: 256M x 1 instances
    urls: pongmatch-ex12.cfapps.io

         state     since                    cpu    memory          disk
    #0   running   2014-12-09 10:04:40 AM   0.0%   35.2M of 256M   45.8M of 1G

</pre>

### Step 7: Test a Deployed App ###

You’ve deployed an app to <%=vars.product_short%>!

Use the `cf` <%=vars.dev_console_2%> to review information and administer your
app and your <%=vars.product_short%> account.
For example, you could edit the `manifest.yml` to increase the number of app
instances from 1 to 3, and redeploy the app with a new app name and host name.

See the [Manage Your Application with the cf CLI](#cli-manage) section for more information. <%=vars.dev_console_4%>

## <a id='cli-manage'></a>Manage Your Application with the cf CLI ##

Run `cf help` to view a complete list of commands, grouped by task categories,
and run `cf help COMMAND` for detailed information about a specific command.
For more information about using the `cf` CLI, refer to the cf Command Line Interface (CLI) topics, especially the <%=vars.cli_v6%> topic.

<p class="note"><strong>Note</strong>: You cannot perform certain tasks in the <%=vars.dev_console_2%> because these are commands that only a <%=vars.product_short%> administrator can run. If you are not a <%=vars.product_short%> administrator, the following message displays for these types of commands:

<code>error code: 10003, message: You are not authorized to perform the requested action</code>

<%=vars.dev_console_note%>
</p>

##<a id='troubleshoot'></a>Troubleshooting ##

If your application fails to start, verify that the application starts in your
local environment.
Refer to the [Troubleshooting Application Deployment and Health](../../devguide/deploy-apps/troubleshoot-app-health.html) topic to
learn more about troubleshooting.

### App Deploy Fails ###

Even when deploying an app fails, the app might exist on
<%=vars.product_short%>.
Run `cf apps` to review the apps in the currently targeted org and space.
You might be able to correct the issue using the <%=vars.dev_console_2%>, or you
might have to delete the app and redeploy.

Common reasons deploying an app fails include:

* You did not successfully create and bind a needed service instance to the app,
such as a PostgreSQL or MongoDB service instance.
Refer to Step 2: Create and Bind a Service Instance for a Ruby Application.
* You did not successfully create a unique URL for the app.
Refer to the troubleshooting tip <strong>App Requires Unique URL</strong>.

### App Requires Unique URL ###

<%=vars.product_short%> requires that each app that you deploy has a unique
URL.
Otherwise, the new app URL collides with an existing app URL and
<%=vars.product_short%> cannot successfully deploy the app.
You can resolve this issue by running `cf push` with either of the following
flags to create a unique URL:

* `-n` to assign a different HOST name for the app.
* `--random-route` to create a URL that includes the app name and random words.
Using this option might create a long URL, depending on the number of words that
the app name includes.