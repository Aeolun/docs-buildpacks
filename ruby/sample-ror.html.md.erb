---
title: Deploy a Sample Application
---

This guide walks you through deploying a sample Ruby on Rails app to <%=vars.product_short%>. Follow this guide to get started with <%=vars.product_short%> and experience the deploy process from start to finish.

### Step 1: Clone the App ###

Run `git clone https://github.com/cloudfoundry-samples/rails_sample_app` to clone the `rails_sample_app` from GitHub.

### Step 2: Log in and Target the API Endpoint ###

Run `cf login -a API-ENDPOINT` to log in and target the API endpoint. Enter your login credentials and select a space and org. The API endpoint is <%=vars.api_endpoint%>.

<%=vars.gen_GSG%>


### Step 3: Create a Service Instance ###

Run `cf create-service elephantsql turtle rails-postgres`. This creates a service instance named `rails-postgres` that uses the `elephantsql` service and the `turtle` plan, as the example below shows.

  <pre class="terminal">
  $   cf create-service elephantsql turtle rails-postgres
  Creating service rails-postgres in org Cloud-Apps / space development as clouduser@example.com....
  OK
  </pre>

  The manifest for the sample app contains a `services` sub-block in the `applications` block, as the example below shows. This binds the `rails-postgres` service instance you created in the previous step.


	---
	applications:
	...
	  services:
	    - rails-postgres


### Step 4: Deploy the App ###

From the root directory of your application, run `cf push rails_sample_app -n HOST` to deploy the app.

Example: `cf push rails_sample_app -n jc0825-rails`

`cf push APP-NAME` creates a URL route to your application in the form HOST.DOMAIN, where HOST is your APP-NAME and DOMAIN is specified by your administrator. Your DOMAIN is `<%=vars.app_domain%>`. For example: `cf push my-app` creates the URL `my-app.<%=vars.app_domain%>`.

The URL for your app must be unique from other apps that <%=vars.product_short%> hosts or the push will fail. Use the following options to help create a unique URL:

* `-n` to assign a different HOST name for the app.
* `--random-route` to create a URL that includes the app name and random words.
* `cf help push` to view other options for this command.

<p class='note'><strong>Note</strong>:
	If no hostname is specified using the <code>-n</code> switch, the host name of the app URL defaults to the app name. CF ​allows​ app names, but not app URIs, to include underscores. CF therefore converts underscores to hyphens when setting a default app URL from an app name.
</p>

If you want to view log activity while the app deploys, launch a new terminal window and run `cf logs APP-NAME`.

In the terminal output of the `cf push` command, the `urls` field of the `App started` block contains the app URL. This is the `HOST` you specified with the `-n` flag plus the domain `<%=vars.app_domain%>`. Once your app deploys, use this URL to access the app online.


The example below shows the terminal output of deploying the `rails_sample_app`. `cf push` uses the instructions in the manifest file to create the app, create and bind the route, and upload the app. It then binds the app to the `rails-postgres` service and follows the instructions in the manifest to start one instance of the app with 256M. After the app starts, the output displays the health and status of the app.


<pre class="terminal">

		$ cf push rails_sample_app -n jmt2014-rails
		Using manifest file /Users/pivotal/workspace/rails_sample_app/manifest.yml

		Updating app rails_sample_app in org Cloud-Apps / space development as clouduser@example.com...
		OK

		Using route jmt2014-rails.<%=vars.app_domain%>
		Uploading rails_sample_app...
		Uploading app files from: /Users/pivotal/workspace/rails_sample_app
		Uploading 445.7K, 217 files
		OK
		Binding service rails-postgres to app rails_sample_app in org Cloud-Apps / space development as clouduser@example.com...
		OK

		Starting app rails_sample_app in org Cloud-Apps / space development as clouduser@example.com...
		OK

		...

		0 of 1 instances running, 1 starting
		1 of 1 instances running

		App started

		Showing health and status for app rails_sample_app in org Cloud-Apps / space development as clouduser@example.com...
		OK

		requested state: started
		instances: 1/1
		usage: 256M x 1 instances
		urls: jmt2014-rails.<%=vars.app_domain%>

		     state     since                    cpu    memory          disk
		#0   running   2014-08-25 03:32:10 PM   0.0%   68.4M of 256M   73.4M of 1G

</pre>

### Step 5: Verifying the app ###

You can verify the sample app you have pushed by browsing to the URL generated in the output of the previous step. In this example, the url is `urls: jmt2014-rails.<%=vars.app_domain%>`.


You've now pushed an app to <%=vars.product_short%>! For help deploying your own app, visit the **Deploy Your App: Guides by Framework** section of the help.
