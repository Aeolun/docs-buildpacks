---
title: Deploying and Developing PHP Apps
---

<%=vars.GSG_intro_sentence%>

This document is intended to document the process of deploying PHP applications to <%=vars.product_full%>. If you experience a problem with deploying PHP apps, check the [Troubleshooting](#troubleshooting) section below.

## <a href="getting-started"></a>Getting Started ##

### Prerequisites

* Basic PHP knowledge
* The [cf Command Line Interface (CLI)](../../devguide/installcf/install-go-cli.html) installed on your workstation

### A First PHP Application

```bash
mkdir my-php-app
cd my-php-app
cat << EOF > index.php
<?php
  phpinfo();
?>
EOF
cf push -m 128M -b https://github.com/cloudfoundry/php-buildpack.git my-php-app
```

Please note that you should change *my-php-app* to some unique name, otherwise you'll get an error and the push will fail.

The example above will create and push a test application, "my-php-app", to Cloud Foundry.  The `-b` argument instructs CF to use this buildpack.  The remainder of the options and arguments are not specific to the buildpack, for questions on those consult the output of `cf help push`.

Here's a breakdown of what happens when you run the example above.

  - On your workstation...
    - It'll create a new directory and one PHP file, which calls `phpinfo()`
    - Run `cf` to push your application.  This will create a new application with a memory limit of 128M (more than enough here) and upload our test file.
  - On Cloud Foundry...
    - The buildpack is executed.
    - Application files are copied to the `htdocs` folder.
    - Apache HTTPD & PHP 5.4 are downloaded, configured with the buildpack defaults and run.
    - Your application is accessible at the URL http://<app-name>.cfapps.io (assuming your targeted towards Pivotal Web Services)

## <a href="caveats"></a>Caveats ##

The PHP buildpack currently doesn't work with custom commands (the `-c` argument to `cf push` or a `command:` key in an application manifest).

As an alternative, the `ADDITIONAL_PREPROCESS_CMDS` [configuration option] can specify commands that should run prior to your app, like migration scripts, and `APP_START_CMD` to specify an alternate PHP script to run, when running a stand-alone PHP app.

## <a href="folder-structure"></a>Folder Structure ##

The easiest way to use the buildpack is to put your assets and PHP files into a directory and push it to <%=vars.product_short%>.  When you do this, the build pack will take your files and automatically move them into the `WEBDIR` (defaults to `htdocs`) folder, which is the directory where your chosen web server looks for the files.

### URL Rewriting

If you select Apache as your webserver, you can include `.htaccess` files with your application.

Alternatively, you can [provide your own Apache or Nginx configurations].

### Preventing Access To PHP Files

The buildpack will put all of your files into a publicly accessible directory.  In some cases, you might want to have PHP files that are not publicly accessible but are on the [include_path].  To do that, you simply create a `lib` directory in your project folder and place your protected files there.

Example:

```bash
$ ls -lRh
total 0
-rw-r--r--  1 daniel  staff     0B Feb 27 21:40 images
-rw-r--r--  1 daniel  staff     0B Feb 27 21:39 index.php
drwxr-xr-x  3 daniel  staff   102B Feb 27 21:40 lib

./lib:
total 0
-rw-r--r--  1 daniel  staff     0B Feb 27 21:40 my.class.php  <-- not public, http://app.cfapps.io/lib/my.class.php == 404
```

This comes with a catch.  If your project legitimately has a `lib` directory, these files will not be publicly available because the build pack does not copy a top-level `lib` directory into the `WEBDIR` folder.  If your project has a `lib` directory that needs to be publicly available then you have two options.

#### Option #1

In your project folder, create an `htdocs` folder (or whatever you've set for `WEBDIR`).  Then move any files that should be publicly accessible into this directory.  In the example below, the `lib/controller.php` file is publicly accessible.

Example:

```bash
$ ls -lRh
total 0
drwxr-xr-x  7 daniel  staff   238B Feb 27 21:48 htdocs

./htdocs:  <--  create the htdocs directory and put your files there
total 0
-rw-r--r--  1 daniel  staff     0B Feb 27 21:40 images
-rw-r--r--  1 daniel  staff     0B Feb 27 21:39 index.php
drwxr-xr-x  3 daniel  staff   102B Feb 27 21:48 lib

./htdocs/lib:   <--  anything under htdocs is public, including a lib directory
total 0
-rw-r--r--  1 daniel  staff     0B Feb 27 21:48 controller.php
```

Given this setup, it is possible to have both a public `lib` directory and a protected `lib` directory.  Here's an example of that setup.

Example:

```bash
$ ls -lRh
total 0
drwxr-xr-x  7 daniel  staff   238B Feb 27 21:48 htdocs
drwxr-xr-x  3 daniel  staff   102B Feb 27 21:51 lib

./htdocs:
total 0
-rw-r--r--  1 daniel  staff     0B Feb 27 21:40 images
-rw-r--r--  1 daniel  staff     0B Feb 27 21:39 index.php
drwxr-xr-x  3 daniel  staff   102B Feb 27 21:48 lib

./htdocs/lib:  <-- public lib directory
total 0
-rw-r--r--  1 daniel  staff     0B Feb 27 21:48 controller.php

./lib: <-- protected lib directory
total 0
-rw-r--r--  1 daniel  staff     0B Feb 27 21:51 my.class.php
```

#### Option #2

The second option is to pick a different name for the `LIBDIR`.  This is a configuration option that you can set (it defaults to `lib`).  Thus if you set it to something else, like `include` your application's `lib` directory would no longer be treated as a special directory and it would be placed into `WEBDIR` (i.e. become public).

#### Other Folders

Beyond the `WEBDIR` and `LIBDIR` directories, the build pack also supports a `.bp-config` directory and a `.extensions` directory.

The `.bp-config` directory should exist at the root of your project directory and it is the location of application specific configuration files.  Application specific configuration files override the default settings used by the build pack.  This link explains [application configuration files] in depth.

The `.extensions` directory should also exist at the root of your project directory and it is the location of application specific custom extensions.  Application specific custom extensions allow you, the developer, to override or enhance the behavior of the build pack.  This link explains [extensions] in more detail.

## <a href="troubleshooting"></a>Troubleshooting ##

The build pack should work in most situations, although nothings perfect so you may need to debug it.  There are a couple easy ways to debug the build pack.

 1. Check the output from the build pack.  It writes some basic information to stdout, like the files that are being downloaded.  Additionally, it will write more information should something fail, specifically you'll see a stack trace explaining why.

 1. Check the logs from the build pack.  The build pack writes logs to disk and you can retrieve them with the `cf files` command.

    ```
    cf files <app> app/.bp/logs/bp.log
    ```

 The output from this log is a little more detailed than what is written to stdout, but does skip some information which might be helpful to understand the state of the build pack when it fails.

 1. To get the most information from the build pack, you can put it into debug mode.  To do this, simply set the `BP_DEBUG` environment variable to `true` (or anything really, it just needs to be set).  This will instruct the build pack to set it's log level to DEBUG and it'll write to stdout.  The combination of these two should provide quite a bit of detail about the state of the build pack as it runs.

[application configuration files]:./gsg-php-config.html
[include_path]:http://us1.php.net/manual/en/ini.core.php#ini.include-path
[extensions]:https://github.com/cloudfoundry/php-buildpack/blob/master/docs/development.md#extensions
[provide your own Apache or Nginx configurations]:./gsg-php-config.html#httpd-nginx-and-php-configurations
[configuration option]:./gsg-php-config.html
